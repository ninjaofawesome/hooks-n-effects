{"version":3,"sources":["index.styles.js","utils/constants.js","Components/CodeBlock/CodeBlock.styles.js","Components/CodeBlock/CodeBlock.jsx","Components/Button/Button.styles.js","Components/Button/Button.jsx","Components/UseStateButton/UseStateButton.jsx","Components/StatefulButton/StatefulButton.jsx","Components/UtilityComponents.js","Components/Rows/UseStateRow/UseStateRow.styles.js","Components/Rows/UseStateRow/UseStateRow.jsx","Components/UseEffectList/UseEffectList.jsx","Components/FetchStateList/FetchStateList.jsx","Components/Rows/UseEffectRow/UseEffectRow.styles.js","Components/Rows/UseEffectRow/UseEffectRow.jsx","Components/Rows/AsyncRow/AsyncRow.styles.js","Components/Rows/AsyncRow/AsyncRow.jsx","Pages/App/App.styles.js","Pages/App/App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","sizes","deviceSize","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","colors","CodeBlockWrapper","styled","pre","CodeBlockCode","code","CodeBlock","props","children","defaultProps","StyledButton","button","buttonColor","textColor","darken","Button","onClick","text","UseStateButton","useState","copy","setCopy","StatefulButton","state","bind","this","setState","Component","Paragraph","p","paraColor","Wrapper","div","Container","Header1","ul","bullets","li","h1","fontSize","Header2","h2","Header3","h3","h4","h5","h6","UseStateWrapper","UseStateRow","UseEffect","listData","setListData","useEffect","fetch","then","response","json","data","undefined","slip","advice","FetchStateList","renderData","dataObj","Object","keys","length","constructor","UseEffectWrapper","UseEffectRow","UseEffectList","AsyncRowWrapper","AsyncRow","AppWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.161b074a.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n\tbody {\n\t  margin: 0;\n\t  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n\t    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n\t    sans-serif;\n\t  -webkit-font-smoothing: antialiased;\n\t  -moz-osx-font-smoothing: grayscale;\n\t}\n`;\n\n","export const sizes = {\n\txsmall: '5px',\n\tsmall: '10px',\n\tmedium: '20px',\n\tlarge: '40px',\n\txlarge: '80px',\n};\n\n// roughly modeled around the iphone sizes, but more could be added here.\nconst deviceSize = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px'\n}\n\nexport const device = {\n  mobileS: `(min-width: ${deviceSize.mobileS})`,\n  mobileM: `(min-width: ${deviceSize.mobileM})`,\n  mobileL: `(min-width: ${deviceSize.mobileL})`,\n  tablet: `(min-width: ${deviceSize.tablet})`,\n  laptop: `(min-width: ${deviceSize.laptop})`,\n  laptopL: `(min-width: ${deviceSize.laptopL})`,\n  desktop: `(min-width: ${deviceSize.desktop})`,\n  desktopL: `(min-width: ${deviceSize.desktop})`\n};\n\nexport const colors = {\n\tblack: '#141414',\n\twhite: '#ffffff',\n\tborderGray: '#e7e7e7',\n\tgreen: '#34df6b',\n\tred: '#d42828',\n\tltNavy: '#2a3151',\n\tdkNavy: '#0c122f',  \n};","import styled from \"styled-components\";\nimport { \n\tcolors, \n\tsizes,\n\tdevice,  \n} from '../../utils/constants'; \n\nexport const CodeBlockWrapper = styled.pre`\n\tdisplay: block;\n`;\n\nexport const CodeBlockCode = styled.code`\n\tdisplay: block;\n\tbackground-color: ${colors.dkNavy};\n\tcolor: ${colors.borderGray};\n\tpadding: ${sizes.xsmall};\n\twidth: 300px;\n\theight: auto;\n\tborder-radius: ${sizes.xsmall}\n\toverflow: hidden;\n\toverflow-x: auto;\n\tmargin-top: 0;\n\t@media ${device.desktopL} {\n\t  width: 750px;\n\t  margin-top: ${sizes.small};\n\t}\n\t@media ${device.desktop} {\n\t  width: 750px;\n\t  margin-top: ${sizes.small};\n\t}\n\t@media ${device.laptopL} { \n\t  width: 600px;\n\t  margin-top: ${sizes.small};\n\t}\n\n\t@media ${device.laptop} { \n\t  width: 500px;\n\t  margin-top: ${sizes.small};\n\t}\n\n\t@media ${device.tablet} { \n\t  width: 450px;\n\t  margin-top: ${sizes.small};\n\t}\n`;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n\tCodeBlockWrapper,\n\tCodeBlockCode,\n} from './CodeBlock.styles.js';\n\nconst CodeBlock = props => {\n\treturn (\n\t\t<CodeBlockWrapper>\n\t\t\t<CodeBlockCode>\n\t\t\t\t{props.children}\n\t\t\t</CodeBlockCode>\n\t\t</CodeBlockWrapper>\n\t);\n};\n\nCodeBlock.propTypes ={\n\tchildren: PropTypes.node,\n};\n\nCodeBlock.defaultProps = {\n\tchildren: <div />,\n};\n\nexport default CodeBlock;","import styled from \"styled-components\"; \nimport { darken } from 'polished';\nimport { sizes } from '../../utils/constants';\n\nexport const StyledButton = styled.button`\n\tbackground-color: ${props => props.buttonColor};\n\tcolor: ${props => props.textColor};\n\tpadding: ${sizes.xsmall} ${sizes.small};\n\tborder: 0;\n\tborder-radius: ${sizes.xsmall};\n  \ttransition: 0.3s;\n  \tdisplay: block;\n  \tmargin: 0 auto;\n\n\t&:hover {\n\t\tbackground-color: ${props => darken(0.2, props.buttonColor)};\n\t}\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n\tStyledButton,\n} from './Button.styles.js';\n\nconst Button = props => {\n\treturn (\n\t\t<StyledButton\n\t\t\ttextColor={props.textColor ? props.textColor : ''}\n\t\t\tbuttonColor={props.buttonColor}\n\t\t\tonClick={props.onClick}\n\t\t>{props.text}</StyledButton>\n\t);\n}\n\nButton.propTypes ={\n\tonClick: PropTypes.func,\n\ttext: PropTypes.string,\n\ttextColor: PropTypes.string,\n\tbuttonColor: PropTypes.string,\n};\n\nButton.defaultProps = {\n\tonClick: () => {},\n\ttextColor: '#ffffff',\n\tbuttonColor: '#141414',\n\ttext: '',\n};\n\nexport default Button;","import React, { useState } from 'react';\nimport { colors } from '../../utils/constants';\nimport Button from '../Button/Button';\n\nconst UseStateButton = () => {\n\tconst [copy, setCopy] = useState('Click Here');\n\treturn (\n\t\t<Button \n\t\t\tonClick={() => setCopy('Clicked!')}\n\t\t\ttext={copy}\n\t\t\tbuttonColor={colors.green}\n\t\t/>\n\t);\n};\n\nexport default UseStateButton;","import React, { Component } from 'react';\nimport { colors } from '../../utils/constants';\nimport Button from '../Button/Button';\n\nclass StatefulButton extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tcopy: 'Click Here'\n\t\t}\n\n\t\tthis.setCopy = this.setCopy.bind(this);\n\t}\n\n\tsetCopy() {\n\t\tthis.setState({ copy: 'Clicked!'})\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<Button \n\t\t\t\tonClick={() => this.setCopy('Clicked!')}\n\t\t\t\ttext={this.state.copy}\n\t\t\t\tbuttonColor={colors.green}\n\t\t\t/>\n\t\t);\n\t}\n};\n\nexport default StatefulButton;","import styled from \"styled-components\"; \nimport { sizes, device } from \"../utils/constants\";\n\n// by no means exhaustive.  Add more as necessary.\n\nexport const Paragraph = styled.p`\n\tcolor: ${props => props.paraColor};\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\talign-items: flex-start;\n\twidth: 100%;\n\theight: auto;\n`;\n\nexport const Container = styled.div`\n\tdisplay: inline-flex;\n\tflex-direction: column;\n\tjustify-content: space-evenly;\n\talign-items: flex-start;\n\twidth: auto;\n\tmax-width: 300px;\n\tpadding: 0 ${sizes.medium};\n\t@media ${device.desktopL} {\n\t  max-width: 750px;\n\t}\n\t@media ${device.desktop} {\n\t  max-width: 750px;\n\t}\n\t@media ${device.laptopL} { \n\t  max-width: 600px;\n\t}\n\n\t@media ${device.laptop} { \n\t  max-width: 500px;\n\t}\n\n\t@media ${device.tablet} { \n\t  max-width: 450px;\n\t}\n`;\n\nexport const List = styled.ul`\n\tlist-style-type: ${props => props.bullets ? 'disc' : 'none'};\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: inline-block;\n`;\n\nexport const ListItem = styled.li`\n\tpadding: ${sizes.xsmall} 0; \n`;\n\nexport const Header1 = styled.h1`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;\n\nexport const Header2 = styled.h2`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;\n\nexport const Header3 = styled.h3`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;\n\nexport const Header4 = styled.h4`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;\n\nexport const Header5 = styled.h5`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;\n\nexport const Header6 = styled.h6`\n\tcolor: ${props => props.paraColor};\n\tfont-size: ${props => props.fontSize};\n\tmargin: 0;\n\tpadding: 0;\n`;","import styled from \"styled-components\";\nimport { sizes } from '../../../utils/constants'; \n\nexport const UseStateWrapper = styled.div`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin: ${sizes.medium} 0;\n`;","import React from 'react';\nimport CodeBlock from '../../CodeBlock/CodeBlock';\nimport UseStateButton from '../../UseStateButton/UseStateButton';\nimport StatefulButton from '../../StatefulButton/StatefulButton';\nimport {\n    Header2, \n    Wrapper,\n    Container, \n    Paragraph \n} from '../../UtilityComponents';\nimport { UseStateWrapper } from './UseStateRow.styles';\nimport { colors } from '../../../utils/constants';\n\nconst UseStateRow = () => (\n\t<UseStateWrapper>\n\t\t<Wrapper>\n\t\t\t<Header2 paraColor={colors.black}>useState Example:  Button State.</Header2>\n\t\t</Wrapper>\n\t\t<Wrapper>\n\t\t    <Container>\n\t\t        <Paragraph>This is an example of a button that uses the useState hook.  It serves the same purpose as setState to store state locally.  Try it yourself by clicking the button!</Paragraph>\n\t\t        <UseStateButton />\n\t\t    </Container>\n\t\t    <Container>\n\t\t        <CodeBlock \n\t\t            children={`\n\t\t                /* useState is the equivalent of setting the state in a class.  It stores state within the component. */\n\t\t                import React, { useState } from 'react';\n\n\t\t                const UseStateButton = () => {\n\t\t                    /* These are destructured props.  Note the first index is the text to change, while the second one is the function to set the copy.  On load, the copy will be what is in useState. */\n\t\t                    const [copy, setCopy] = useState('Click Here');\n\t\t                    \n\t\t                    return (\n\t\t                        <button onClick={() => setCopy('Clicked!')}>\n\t\t                        {copy}\n\t\t                        </button>\n\t\t                    );\n\t\t                };\n\t\t             `}\n\t\t        />\n\t\t    </Container>\n\t\t</Wrapper>\n\t\t<Wrapper>\n\t\t\t<Wrapper>\n\t\t\t\t<Header2 paraColor={colors.black}>Local State Example:  Button State.</Header2>\n\t\t\t</Wrapper>\n\t\t    <Container>\n\t\t        <Paragraph>This is an example of a button that uses the state locally, for reference.  On click, the state is set in the constructor.  Click the button and see how it works! </Paragraph>\n\t\t        <StatefulButton />\n\t\t    </Container>\n\t\t    <Container>\n\t\t        <CodeBlock \n\t\t            children={`\n\t\t                /* This is the exact same thing as shown above with useState.  On click the copy will be set to the new string. */\n\t\t                class StatefulButton extends Component {\n\t\t                    constructor() {\n\t\t                        super();\n\n\t\t                        this.state = {\n\t\t                            copy: 'Click Here'\n\t\t                        }\n\n\t\t                        this.setCopy = this.setCopy.bind(this);\n\t\t                    }\n\n\t\t                    setCopy() {\n\t\t                        this.setState({ copy: 'Clicked!'})\n\t\t                    }\n\n\t\t                    render() {\n\t\t                        return(\n\t\t                            <Button \n\t\t                                onClick={() => this.setCopy('Clicked!')}\n\t\t                                text={this.state.copy}\n\t\t                                buttonColor={colors.green}\n\t\t                            />\n\t\t                        );\n\t\t                    }\n\t\t                };\n\t\t             `}\n\t\t        />\n\t\t    </Container>\n\t\t</Wrapper>\n\t</UseStateWrapper>\n);\n\nexport default UseStateRow;","import React, { useState, useEffect } from 'react';\nimport {\n    Header3,\n    Paragraph,  \n} from '../UtilityComponents';\nimport { colors } from '../../utils/constants';\n\nconst UseEffect = () => {\n\tconst [listData, setListData] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetch('https://api.adviceslip.com/advice')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => setListData(data));\n\n\t}, []);\n\n\tconst data = [listData];\n\treturn (\n\t\t<div>\n\t\t\t<Header3 paraColor={colors.black}>Example of local state</Header3>\n\t\t\t<Paragraph>{data[0].slip !== undefined ? data[0].slip.advice : ''}</Paragraph>\n\t\t</div>\n\t);\n};\n\nexport default UseEffect;\n","import React, { Component } from 'react';\nimport {\n    Header3,\n    Paragraph,  \n} from '../UtilityComponents';\nimport { colors } from '../../utils/constants';\n\nclass FetchStateList extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state={\n\t\t\tlistData: {}\n\t\t};\n\n\t\tthis.renderData = this.renderData.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://api.adviceslip.com/advice')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => this.setState({listData: data}));\n\t}\n\n\trenderData() {\n\t\tconst dataObj = this.state.listData;\n\t\treturn Object.keys(dataObj).length === 0 && dataObj.constructor === Object ? 'loading' : dataObj.slip.advice;\n\t}\n\n\trender() {\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header3 paraColor={colors.black}>Example of fetched state</Header3>\n\t\t\t\t<Paragraph>{this.renderData()}</Paragraph>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default FetchStateList;\n","import styled from \"styled-components\";\nimport { sizes } from '../../../utils/constants'; \n\nexport const UseEffectWrapper = styled.div`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin: ${sizes.medium} 0;\n`;","import React from 'react';\nimport CodeBlock from '../../CodeBlock/CodeBlock';\nimport UseEffectList from '../../UseEffectList/UseEffectList';\nimport FetchStateList from '../../FetchStateList/FetchStateList';\nimport {\n    Header2, \n    Wrapper,\n    Container, \n    Paragraph \n} from '../../UtilityComponents';\nimport { UseEffectWrapper } from './UseEffectRow.styles';\nimport { colors } from '../../../utils/constants';\n\nconst UseEffectRow = () => (\n\t<UseEffectWrapper>\n\t\t<Wrapper>\n\t\t\t<Header2 paraColor={colors.black}>useEffect Example:  A fetched bit of data.</Header2>\n\t\t</Wrapper>\n\t\t<Wrapper>\n\t\t    <Container>\n\t\t        <Paragraph>This is an example of fetching data with the useEffect hook.  In this case, the listData is being set with the effect setListData which is equivalent to the this setState function.</Paragraph>\n\t\t        <UseEffectList />\n\t\t    </Container>\n\t\t    <Container>\n\t\t        <CodeBlock \n\t\t            children={`\n\t\t            \tconst UseEffectList = () => {\n\t\t                \tconst [listData, setListData] = useState([]);\n\n\t\t                \tuseEffect(() => {\n\t\t                \t\tfetch('https://api.adviceslip.com/advice')\n\t\t                \t\t\t.then(response => response.json())\n\t\t                \t\t\t.then(data => setListData(data));\n\n\t\t                \t}, []);\n\n\t\t                \tconst data = [listData];\n\t\t                \treturn (\n\t\t                \t\t<div>{data[0].slip !== undefined ? data[0].slip.advice : ''}</div>\n\t\t                \t);\n\t\t                };  \n\t\t            `}\n\t\t        />\n\t\t    </Container>\n\t\t</Wrapper>\n\t\t<Wrapper>\n\t\t\t<Wrapper>\n\t\t\t\t<Header2 paraColor={colors.black}>Old School Example:  Fetched data.</Header2>\n\t\t\t</Wrapper>\n\t\t    <Container>\n\t\t        <Paragraph>This is an example of how you would do the same thing, but without the useEffect hook. As mentioned above, this uses the setState function, once the data has been fetched on mount.  To also account for an empty state, another method was added for a loading state as the data will not render until the components are fetched.</Paragraph>\n\t\t        <FetchStateList />\n\t\t    </Container>\n\t\t    <Container>\n\t\t        <CodeBlock \n\t\t            children={`\n\t\t\t            class FetchStateList extends Component {\n\t\t\t            \tconstructor() {\n\t\t\t            \t\tsuper();\n\t\t\t            \t\tthis.state={\n\t\t\t            \t\t\tlistData: {}\n\t\t\t            \t\t};\n\n\t\t\t            \t\tthis.renderData = this.renderData.bind(this);\n\t\t\t            \t}\n\n\t\t\t            \tcomponentDidMount() {\n\t\t\t            \t\tfetch('https://api.adviceslip.com/advice')\n\t\t\t            \t\t\t.then(response => response.json())\n\t\t\t            \t\t\t.then(data => this.setState({listData: data}));\n\t\t\t            \t}\n\n\t\t\t            \trenderData() {\n\t\t\t            \t\tconst dataObj = this.state.listData;\n\t\t\t            \t\treturn Object.keys(dataObj).length === 0 && dataObj.constructor === Object ? 'loading' : dataObj.slip.advice;\n\t\t\t            \t}\n\n\t\t\t            \trender() {\t\t\n\t\t\t            \t\treturn (\n\t\t\t            \t\t\t<div>{this.renderData()}</div>\n\t\t\t            \t\t);\n\t\t\t            \t}\n\t\t\t            };\n\t\t            `}\n\t\t        />\n\t\t    </Container>\n\t\t</Wrapper>\n\t</UseEffectWrapper>\n);\n\nexport default UseEffectRow;","import styled from \"styled-components\";\nimport { sizes } from '../../../utils/constants'; \n\nexport const AsyncRowWrapper = styled.div`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin: ${sizes.medium} 0;\n`;","import React from 'react';\nimport CodeBlock from '../../CodeBlock/CodeBlock';\nimport {\n    Header2, \n    Wrapper,\n    Container, \n    Paragraph \n} from '../../UtilityComponents';\nimport { AsyncRowWrapper } from './AsyncRow.styles';\nimport { colors } from '../../../utils/constants';\n\nconst AsyncRow = () => (\n\t<AsyncRowWrapper>\n\t\t<Wrapper>\n\t\t\t<Header2 paraColor={colors.black}>One more thing on useEffect and Async operations.</Header2>\n\t\t</Wrapper>\n\t\t<Wrapper>\n\t\t    <Container>\n\t\t        <Paragraph>You cannot return a promise using an effect, only a function.  So with asynchronous actions, which always return a promise, the code will have to be refactored.  In the fetch example from above, here's how that might look.</Paragraph>\n\t\t    </Container>\n\t\t    <Container>\n\t\t        \t<CodeBlock \n\t\t            children={`\n\t\t            \tconst UseEffectList = () => {\n\t\t                \tconst [listData, setListData] = useState([]);\n\n\t\t                \tasync function getData() {\n\t\t                \t\t// Promises, promises\n\t\t                \t\tconst response = await fetch('https://api.adviceslip.com/advice');\n\t\t                \t\tconst data = await response.json();\n\t\t                \t\tsetListData(data);\n\n\t\t                \t}, []);\n\n\t\t                \tuseEffect(() => {\n\t\t                \t\t//Hey Presto!\n\t\t                \t\tgetData();\n\t\t                \t})\n\n\t\t       \t\t        return (\n\t\t                \t\t<div>{data[0].slip !== undefined ? data[0].slip.advice : ''}</div>\n\t\t                \t);\n\t\t                };  \n\t\t            `}\n\t\t        />\n\t\t    </Container>\n\t\t</Wrapper>\n\t</AsyncRowWrapper>\n);\n\nexport default AsyncRow;","import styled from \"styled-components\";\n\nexport const AppWrapper = styled.div`\n\ttext-align: center;\n`","import React from 'react';\nimport UseStateRow from '../../Components/Rows/UseStateRow/UseStateRow';\nimport UseEffectRow from '../../Components/Rows/UseEffectRow/UseEffectRow';\nimport AsyncRow from '../../Components/Rows/AsyncRow/AsyncRow';\nimport { Header1, Paragraph } from '../../Components/UtilityComponents';\nimport { colors, sizes } from '../../utils/constants';\nimport { AppWrapper } from './App.styles.js';\n\nconst App = () => (\n    <AppWrapper>\n        <Header1 paraColor={colors.black} fontSize={sizes.xlarge}>Hooks n Effects</Header1> \n        <Paragraph>A cheat sheet of various hooks and effects for reference on the fly. </Paragraph>       \n        <UseStateRow />\n        <UseEffectRow />\n        <AsyncRow />\n    </AppWrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './index.styles.js';\nimport App from './Pages/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.Fragment>\n\t\t<GlobalStyle />\n\t\t<App />\n\t</React.Fragment>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}